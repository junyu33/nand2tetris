// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=M
@13
M=D
@2
D=M
@0
D=D+A
@14
M=D
@14
A=M
D=M
@13
A=M
M=D
@0
D=M
M=D+1
// push constant 2
@2
D=A
@0
A=M
M=D
@0
D=M
M=D+1
// lt                     // checks if n<2
@0
D=M
M=D-1
@0
A=M
D=M
@13
M=D
@0
D=M
M=D-1
@0
A=M
D=M
@13
A=M
D=D-A
@JLT10000
D; JLT
@0
D=0
@JLT10000end
0;JMP
(JLT10000)
@0
D=-1
(JLT10000end)
@0
A=M
M=D
@0
D=M
M=D+1
// if-goto IF_TRUE
@0
D=M
M=D-1
@0
A=M
D=M
@IF_TRUE
M=D
@IF_TRUE
M; JNE
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE          // if n<2, return n
(IF_TRUE)
// push argument 0
@0
D=M
@13
M=D
@2
D=M
@0
D=D+A
@14
M=D
@14
A=M
D=M
@13
A=M
M=D
@0
D=M
M=D+1
// return
@1
A=M
D=M
@endFrame
M=D
@endFrame
D=M
@5
A=D-A
D=M
@retAddr
M=D
@0
D=M
M=D-1
@0
A=M
D=M
@2
A=M
M=D
@2
D=M
@0
M=D+1
@endFrame
D=M
@1
A=D-A
D=M
@4
M=D
@endFrame
D=M
@2
A=D-A
D=M
@3
M=D
@endFrame
D=M
@3
A=D-A
D=M
@2
M=D
@endFrame
D=M
@4
A=D-A
D=M
@1
M=D
@retAddr
A=M
0;JMP
// label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(IF_FALSE)
// push argument 0
@0
D=M
@13
M=D
@2
D=M
@0
D=D+A
@14
M=D
@14
A=M
D=M
@13
A=M
M=D
@0
D=M
M=D+1
// push constant 2
@2
D=A
@0
A=M
M=D
@0
D=M
M=D+1
// sub
@0
D=M
M=D-1
@0
A=M
D=M
@13
M=D
@0
D=M
M=D-1
@0
A=M
D=M
@13
A=M
D=D - A
@0
A=M
M=D
@0
D=M
M=D+1
// call Main.fibonacci 1  // computes fib(n-2)
@Main.fibonacci20000
D=A
@0
D=M
M=D+1
@0
A=M
M=D
@1
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@ARG
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@3
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@4
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@0
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci20000)
// push argument 0
@0
D=M
@13
M=D
@2
D=M
@0
D=D+A
@14
M=D
@14
A=M
D=M
@13
A=M
M=D
@0
D=M
M=D+1
// push constant 1
@1
D=A
@0
A=M
M=D
@0
D=M
M=D+1
// sub
@0
D=M
M=D-1
@0
A=M
D=M
@13
M=D
@0
D=M
M=D-1
@0
A=M
D=M
@13
A=M
D=D - A
@0
A=M
M=D
@0
D=M
M=D+1
// call Main.fibonacci 1  // computes fib(n-1)
@Main.fibonacci20000
D=A
@0
D=M
M=D+1
@0
A=M
M=D
@1
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@ARG
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@3
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@4
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@0
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci20000)
// add                    // returns fib(n-1) + fib(n-2)
@0
D=M
M=D-1
@0
A=M
D=M
@13
M=D
@0
D=M
M=D-1
@0
A=M
D=M
@13
A=M
D=D + A
@0
A=M
M=D
@0
D=M
M=D+1
// return
@1
A=M
D=M
@endFrame
M=D
@endFrame
D=M
@5
A=D-A
D=M
@retAddr
M=D
@0
D=M
M=D-1
@0
A=M
D=M
@2
A=M
M=D
@2
D=M
@0
M=D+1
@endFrame
D=M
@1
A=D-A
D=M
@4
M=D
@endFrame
D=M
@2
A=D-A
D=M
@3
M=D
@endFrame
D=M
@3
A=D-A
D=M
@2
M=D
@endFrame
D=M
@4
A=D-A
D=M
@1
M=D
@retAddr
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@0
A=M
M=D
@0
D=M
M=D+1
// call Main.fibonacci 1   // computes the 4'th fibonacci element
@Main.fibonacci20000
D=A
@0
D=M
M=D+1
@0
A=M
M=D
@1
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@ARG
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@3
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@4
A=M
D=M
@0
D=M
M=D+1
@0
A=M
M=D
@0
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci20000)
// label WHILE
(WHILE)
// goto WHILE              // loops infinitely
@WHILE
0;JMP
