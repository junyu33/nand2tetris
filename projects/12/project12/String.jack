// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
     
    static Array charArray;
    static int len;

    constructor String new(int maxLength) {
        let charArray = Array.new(maxLength + 1);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let charArray[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let charArray[len - 1] = 0;
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int val;
        let val = 0;
        let i = 0;
        while (i < len) {
            let val = val * 10 + (charArray[i] - 48);
            let i = i + 1;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int cnt;
        let cnt = 0;
        if (val < 0) {
            let charArray[0] = 45;
            let cnt = 1;
            let val = -val;
        }
        if (val / 10000) {
            let charArray[cnt] = (val / 10000 + 48);
            let cnt = cnt + 1;
            let val = val - ((val / 10000) * 10000);
        }
        if (val / 1000) {
            let charArray[cnt] = (val / 1000 + 48);
            let cnt = cnt + 1;
            let val = val - ((val / 1000) * 1000);
        }
        if (val / 100) {
            let charArray[cnt] = (val / 100 + 48);
            let cnt = cnt + 1;
            let val = val - ((val / 100) * 100);
        }
        if (val / 10) {
            let charArray[cnt] = (val / 10 + 48);
            let cnt = cnt + 1;
            let val = val - ((val / 10) * 10);
        }
        let charArray[cnt] = (val + 48);
        let cnt = cnt + 1;
        let len = cnt;
        let charArray[cnt] = 0;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
